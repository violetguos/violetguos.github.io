<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hardware on Y Violet Guo</title>
    <link>https://violetguos.github.io/categories/hardware/</link>
    <description>Recent content in hardware on Y Violet Guo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sat, 02 Apr 2016 06:28:35 -0500</lastBuildDate>
    
	<atom:link href="https://violetguos.github.io/categories/hardware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Program MIPS instruction in Verilog</title>
      <link>https://violetguos.github.io/post/cpu/</link>
      <pubDate>Sat, 02 Apr 2016 06:28:35 -0500</pubDate>
      
      <guid>https://violetguos.github.io/post/cpu/</guid>
      <description>Introduction In this project, I have built a multi-cycle processor&amp;rsquo;s instruction set from scratch.
Technical Details  Programmed a multicycle processor in Verilog on a Altera DE-1 FPGA Configured a new Assembly language instruction set with Verilog  Lessons Learned In processor or hardware design, unlike computer software, there is no room for uncertainty. For example, a software engineer may put a button in a not so convenient place for no good reason, but it does not hinder the functionality of the app, just harder to navigate.</description>
    </item>
    
    <item>
      <title>Roulette on FPGA</title>
      <link>https://violetguos.github.io/post/roulette/</link>
      <pubDate>Sat, 02 Apr 2016 01:29:17 -0500</pubDate>
      
      <guid>https://violetguos.github.io/post/roulette/</guid>
      <description>Introduction This project was built in the same course as the multi-cycle CPU! As the reader can see, low level hardware can be fun. The two projects share similar principles, but this project has additional displays, such as a computer screen, a speaker for audio output, and we made the roulette as pretty as we could. They all run on the same hardware chip(field programmable gate array, FPGA).
Technical Details  Built a roulette game with PS/2 keyboard, audio output, motor, lego controller, and Altera FPGA Implemented linear feedback shift register in Assembly and C to randomize motor speed and spin time Interfaced keyboard input to prompt userâ€™s bet and display on VGA output with JTAG UART, JPIO ports  Lessons Learned User interface (the screen display, music, and the roulette) makes a difference Creativity matters: engineers should not only focus on the technical details</description>
    </item>
    
  </channel>
</rss>